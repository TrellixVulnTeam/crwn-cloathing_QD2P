{"ast":null,"code":"var _jsxFileName = \"/home/tomasz/Desktop/Work/Projects/crwn-clothing/src/components/sign-in/sign-in.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport './sign-in.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  _s();\n\n  const [userCrudentials, setCrudentials] = useState({\n    email: '',\n    password: ''\n  });\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      email,\n      password\n    } = userCrudentials;\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCrudentials({ ...userCrudentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-in\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"I already have an account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign inwith your email and password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"email\",\n        type: \"email\",\n        value: this.state.email,\n        handleChange: handleChange,\n        label: \"Email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"password\",\n        type: \"password\",\n        value: this.state.password,\n        handleChange: handleChange,\n        label: \"Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"submit\",\n          value: \"Submit Form\",\n          children: \"Sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          onClick: googleSignInStart,\n          isGoogleSignIn: true,\n          children: \"Sign in with Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SignIn, \"ZMpB8ggJrKbQx41yfkXrOZ44t0Y=\");\n\n_c = SignIn;\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["/home/tomasz/Desktop/Work/Projects/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","userCrudentials","setCrudentials","email","password","handleSubmit","event","preventDefault","handleChange","value","name","target","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport FormInput from '../form-input/form-input.component'\nimport CustomButton from '../custom-button/custom-button.component'\n\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nimport './sign-in.styles.scss';\n\nconst SignIn = ({ emailSignInStart, googleSignInStart }) => {\n    const [ userCrudentials, setCrudentials ] = useState({\n        email: '',\n        password: '',\n    })\n\n    const handleSubmit = async event => {\n        event.preventDefault();\n        const {email, password} = userCrudentials;\n        \n        emailSignInStart(email, password);\n    }\n\n    const handleChange = event => {\n        const {value, name} = event.target;\n\n        setCrudentials({...userCrudentials, [name]: value })\n    }\n\n    return(\n        <div className='sign-in'>\n            <h1>I already have an account</h1>\n            <span>Sign inwith your email and password</span>\n\n            <form onSubmit={handleSubmit}>\n                <FormInput \n                    name='email' \n                    type='email' \n                    value={this.state.email} \n                    handleChange={handleChange}\n                    label='Email'\n                    required\n                />\n                \n                <FormInput \n                    name='password' \n                    type='password' \n                    value={this.state.password} \n                    handleChange={handleChange}\n                    label='Password'\n                    required\n                />\n\n                <div className=\"buttons\">\n                    <CustomButton \n                        type=\"submit\" \n                        value='Submit Form'\n                    >\n                        Sign in\n                    </CustomButton>\n\n                    <CustomButton \n                        type=\"button\"\n                        onClick={googleSignInStart} \n                        isGoogleSignIn\n                    >\n                        Sign in with Google\n                    </CustomButton>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()), \n    emailSignInStart: (email, password) => dispatch(emailSignInStart({email, password}))\n})\n\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}