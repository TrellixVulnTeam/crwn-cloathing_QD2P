{"ast":null,"code":"var _jsxFileName = \"/home/tomasz/Desktop/Work/Projects/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport { createStructuredSelector } from 'reselect';\nimport CollectionOverview from '../../components/collection-overview/collection-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionsOveriviewWithSpinner = WithSpinner(CollectionOverview);\n_c = CollectionsOveriviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections');\n    collectionRef.onSnapshot(async snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionsOveriviewWithSpinner, {\n          isLoading: loading,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n          isLoading: loading,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionsOveriviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["/home/tomasz/Desktop/Work/Projects/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","updateCollections","selectCurrentUser","createStructuredSelector","CollectionOverview","CollectionPage","WithSpinner","firestore","convertCollectionsSnapshotToMap","CollectionsOveriviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","onSnapshot","snapshot","collectionsMap","setState","render","match","path","mapDispatchToProps","dispatch","mapStateToProps","currentUser"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAOC,kBAAP,MAA+B,oEAA/B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;;AAEA,MAAMC,+BAA+B,GAAGH,WAAW,CAACF,kBAAD,CAAnD;KAAMK,+B;AACN,MAAMC,yBAAyB,GAAGJ,WAAW,CAACD,cAAD,CAA7C;MAAMK,yB;;AAEN,MAAMC,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACnCC,KADmC,GAC3B;AACJC,MAAAA,OAAO,EAAE;AADL,KAD2B;AAAA,SAKnCC,uBALmC,GAKT,IALS;AAAA;;AAOnCC,EAAAA,iBAAiB,GAAE;AACf,UAAM;AAACf,MAAAA;AAAD,QAAsB,KAAKgB,KAAjC;AAEA,UAAMC,aAAa,GAAGX,SAAS,CAACY,UAAV,CAAqB,aAArB,CAAtB;AAEAD,IAAAA,aAAa,CAACE,UAAd,CAAyB,MAAMC,QAAN,IAAkB;AACvC,YAAMC,cAAc,GAAGd,+BAA+B,CAACa,QAAD,CAAtD;AACApB,MAAAA,iBAAiB,CAACqB,cAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AACVT,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KAND;AAOH;;AAGDU,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKR,KAArB;AACA,UAAM;AAACH,MAAAA;AAAD,QAAY,KAAKD,KAAvB;AAEA,wBACQ;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAG,GAAEY,KAAK,CAACC,IAAK,EAAjC;AAAoC,QAAA,MAAM,EAAET,KAAK,iBAC7C,QAAC,+BAAD;AAAiC,UAAA,SAAS,EAAEH,OAA5C;AAAA,aAAyDG;AAAzD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAG,GAAEQ,KAAK,CAACC,IAAK,gBAA3B;AAA4C,QAAA,MAAM,EAAET,KAAK,iBACrD,QAAC,yBAAD;AAA2B,UAAA,SAAS,EAAEH,OAAtC;AAAA,aAAmDG;AAAnD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADR;AAYH;;AAtCkC;;AAyCvC,MAAMU,kBAAkB,GAAGC,QAAQ,KAAI;AACnC3B,EAAAA,iBAAiB,EAAGqB,cAAD,IAAoBM,QAAQ,CAAC3B,iBAAiB,CAACqB,cAAD,CAAlB;AADZ,CAAJ,CAAnC;;AAIA,MAAMO,eAAe,GAAG1B,wBAAwB,CAAC;AAC7C2B,EAAAA,WAAW,EAAE5B;AADgC,CAAD,CAAhD;AAIA,eAAeF,OAAO,CAAC6B,eAAD,EAAkBF,kBAAlB,CAAP,CAA6ChB,QAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux'; \n\nimport { updateCollections } from '../../redux/shop/shop.actions'\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport { createStructuredSelector } from 'reselect';\n\nimport CollectionOverview from '../../components/collection-overview/collection-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nconst CollectionsOveriviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n    state = {\n        loading: true\n    }\n\n    unsubscribeFromSnapshot = null;\n\n    componentDidMount(){\n        const {updateCollections} = this.props;\n\n        const collectionRef = firestore.collection('collections');\n\n        collectionRef.onSnapshot(async snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            updateCollections(collectionsMap);\n            this.setState({\n                loading: false\n            })\n        })\n    }\n\n\n    render() {\n        const {match} = this.props;\n        const {loading} = this.state;\n\n        return (\n                <div className='shop-page'>\n                    <Route exact path={`${match.path}`} render={props => (\n                        <CollectionsOveriviewWithSpinner isLoading={loading} {...props} />)\n                } \n                    />\n                    <Route path={`${match.path}/:collectionId`} render={props => (\n                        <CollectionPageWithSpinner isLoading={loading} {...props} />)\n                } \n                    />\n                </div>\n            )\n    }\n}  \n\nconst mapDispatchToProps = dispatch =>({\n    updateCollections: (collectionsMap) => dispatch(updateCollections(collectionsMap))\n})\n\nconst mapStateToProps = createStructuredSelector({\n    currentUser: selectCurrentUser\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}